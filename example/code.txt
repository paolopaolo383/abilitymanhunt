package testgroup.testartifact;
import com.destroystokyo.paper.HeightmapType;
import com.destroystokyo.paper.event.server.ServerTickStartEvent;
import io.papermc.paper.world.MoonPhase;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.TextColor;
import net.kyori.adventure.util.Ticks;
import org.bukkit.*;
import com.google.common.util.concurrent.FutureCallback;

import java.io.File;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import java.util.logging.Logger;
import org.bukkit.attribute.Attribute;
import org.bukkit.block.Biome;
import org.bukkit.block.Block;
import org.bukkit.block.data.BlockData;
import org.bukkit.boss.DragonBattle;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.*;
import org.bukkit.event.block.Action;
import org.bukkit.event.entity.CreatureSpawnEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.player.PlayerInteractAtEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.generator.BlockPopulator;
import org.bukkit.generator.ChunkGenerator;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.material.MaterialData;
import org.bukkit.metadata.MetadataValue;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.WorldCreator.*;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.event.EventHandler;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scoreboard.*;
import org.bukkit.util.BoundingBox;
import org.bukkit.util.Consumer;
import org.bukkit.util.RayTraceResult;
import org.bukkit.util.Vector;
import org.checkerframework.checker.units.qual.C;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;



public final class Testartifact extends JavaPlugin implements Listener
{
    public ChatColor[] col ={ChatColor.RED,ChatColor.DARK_RED,ChatColor.YELLOW,ChatColor.GREEN,ChatColor.DARK_GREEN,ChatColor.AQUA,ChatColor.DARK_AQUA, ChatColor.BLUE,ChatColor.DARK_BLUE,ChatColor.LIGHT_PURPLE,ChatColor.DARK_PURPLE,ChatColor.GRAY,ChatColor.GOLD,ChatColor.DARK_GRAY,ChatColor.RED,ChatColor.DARK_RED,ChatColor.YELLOW,ChatColor.GREEN,ChatColor.DARK_GREEN,ChatColor.AQUA};
    public int plx =  0;
    public int plz = 0;
    public int playercnt;
    public String preyname = "null";
    private int pre;
    private World tap;
    int totaltick = 0;
    int game = 0;
    private Scoreboard board;
    private Objective obj;
    private Score one;
    private Score two;
    private Score three;
    private Score four;
    private Score five;
    private Score six;
    private Score seven;
    int sec = 0;
    int min = 0;
    boolean isgaming = false;
    int tick = 0;
    int time=10;
    int nerbi = 2000;
    //데이터
    HashMap<UUID, Integer> cooltime = new HashMap<UUID, Integer>();
    ConsoleCommandSender consol = Bukkit.getConsoleSender();
    HashMap<UUID, Integer> freeze = new HashMap<UUID, Integer>();
    HashMap<UUID, Integer> map = new HashMap<UUID, Integer>();
    public void block(int x, int y, int z,Material m)
    {
        getServer().getWorld("world").getBlockAt(new Location(getServer().getWorld("world"),x, y, z)).setType(m);
    }
    public void de(Player pl)
    {
        pl.teleport(new Location(getServer().getWorld("world"),pl.getLocation().getX(),getServer().getWorld("world").getHighestBlockYAt(pl.getLocation().getBlockX(),pl.getLocation().getBlockZ())+1,pl.getLocation().getZ()));
    }
    public void win(Player player)
    {
        int x=-3, y=100, z=-3;
        for(int j = x;j<(x+6);j++)
        {
            for(int i = z;i<(z+6);i++)
            {
                getServer().getWorld("world").getBlockAt(j,y,i).setType(Material.IRON_BLOCK);
            }
        }
        z=-3; y = 103;x = -3;
        for(int i = 101;i<y;i++)
        {
            for(int j = x;j<(x+6);j++)
            {
                getServer().getWorld("world").getBlockAt(j,i,z).setType(Material.IRON_BLOCK);
            }
        }
        int size  =getServer().getWorld("world").getPlayers().size();
        getServer().getWorld("world").getBlockAt(0,100,1).setType(Material.DIAMOND_BLOCK);
        for(int i = 0;i<size;i++)
        {
            Player pla = (Player)getServer().getWorld("world").getPlayers().get(i);
            pla.teleport(new Location(getServer().getWorld("world"),0, 101, 1));
            pla.setBedSpawnLocation(new Location(getServer().getWorld("world"),0, 101, 1));
            pla.setGameMode(GameMode.SURVIVAL);
        }

    }
    public void make(int p)
    {
        int x=-4, y=p, z=-4;
        for(int k = 0;k<y;k++)
        {
            for(int j = x;j<(x+8);j++)
            {
                for(int i = z;i<(z+8);i++)
                {
                    getServer().getWorld("world").getBlockAt(j,k,i).setType(Material.VOID_AIR);
                }
            }
        }

    }
    @EventHandler
    public void onPlayerMove(PlayerMoveEvent e)
    {
        UUID uuid = e.getPlayer().getUniqueId();
        if(freeze.get(uuid)==1)
        {
            e.setCancelled(true);
        }
    }
    @EventHandler
    public void onPlayerEvent(PlayerInteractEvent e)
    {
        UUID uuid = e.getPlayer().getUniqueId();
        if(freeze.get(uuid)==1)
        {
            e.setCancelled(true);
        }
    }

    public void title(Player player, String str)
    {
        player.sendTitle(str, null);
    }
    public void uhcscboard(Player player)
    {
        int p = 1;
        ScoreboardManager sm = Bukkit.getScoreboardManager();
        board = sm.getNewScoreboard();
        obj = board.registerNewObjective("totalplaytime", "dummy");
        obj.setDisplayName(ChatColor.AQUA +"UHC");
        obj.setDisplaySlot(DisplaySlot.SIDEBAR);


        one = obj.getScore(ChatColor.GREEN+String.valueOf(min)+":"+String.valueOf(sec));
        one.setScore(p);
        p++;
        two = obj.getScore(ChatColor.WHITE+"총 플레이 시간");
        two.setScore(p);
        p++;
        if(min<10)
        {
            int ti = 600-totaltick/20;

            three = obj.getScore(ChatColor.GREEN+String.valueOf((int)(ti/60))+":"+String.valueOf((ti%60)));
        }
        else if(min<45)
        {
            int ti = 2700-totaltick/20;

            three = obj.getScore(ChatColor.GREEN+String.valueOf((int)(ti/60))+":"+String.valueOf((ti%60)));
        }
        else if(min<50)
        {
            int ti = 3000-totaltick/20;

            three = obj.getScore(ChatColor.GREEN+String.valueOf((int)(ti/60))+":"+String.valueOf((ti%60)));
        }
        three.setScore(p);
        p++;
        if(min<10)
        {
            four= obj.getScore(ChatColor.WHITE+"평화시간 끝나기");
        }
        else if(min<45)
        {
            four= obj.getScore(ChatColor.WHITE+"데스메치까지");
        }
        else if(min<50)
        {
            four= obj.getScore(ChatColor.WHITE+"게임 끝까지");
        }
        four.setScore(p);
        p++;
        player.setScoreboard(board);
    }

    public void huntscboard(Player player)
    {
        int p = 1;
        ScoreboardManager sm = Bukkit.getScoreboardManager();
        board = sm.getNewScoreboard();
        obj = board.registerNewObjective("totalplaytime", "dummy");
        obj.setDisplayName(ChatColor.AQUA + "MANHUNT");
        obj.setDisplaySlot(DisplaySlot.SIDEBAR);
        four= obj.getScore(ChatColor.WHITE+"runner : "+ChatColor.RED+preyname+ChatColor.WHITE);

        four.setScore(p);
        p++;

        one = obj.getScore(ChatColor.GREEN + String.valueOf(min) + ":" + String.valueOf(sec));
        one.setScore(p);
        p++;
        two = obj.getScore(ChatColor.WHITE + "총 플레이 시간");
        two.setScore(p);
        p++;

        if(min==0&&sec<10)
        {
            int ti = 10-totaltick/20;

            three = obj.getScore(ChatColor.GREEN+String.valueOf(ti)+"초");
        }
        else if(min==0&&sec<30)
        {
            int ti = 30-totaltick/20;

            three = obj.getScore(ChatColor.GREEN+String.valueOf(ti)+"초");
        }
        three.setScore(p);
        p++;
        if(min==0&&sec<10)
        {
            four= obj.getScore(ChatColor.WHITE+"도망가는사람 출발까지");
        }
        else if(min==0&&sec<20)
        {
            four= obj.getScore(ChatColor.WHITE+"헌터 출발까지");
        }

        four.setScore(p);
        p++;

        five= obj.getScore(ChatColor.BLUE+"z:"+plz);

        five.setScore(p);
        p++;
        six= obj.getScore(ChatColor.RED+"x:"+plx);

        six.setScore(p);
        p++;

        player.setScoreboard(board);
    }
    @Override
    public void onEnable()
    {
        getServer().getWorld("world").setDifficulty(Difficulty.NORMAL);
        getServer().getWorld("world_nether").setDifficulty(Difficulty.NORMAL);
        getServer().getWorld("world_the_end").setDifficulty(Difficulty.NORMAL);

        getServer().getWorld("world").setGameRule(GameRule.DO_DAYLIGHT_CYCLE, false);
        getServer().getWorld("world").setPVP(true);
        consol.sendMessage( ChatColor.AQUA + "[하이픽셀플러그인 1.0v 활성화.]");
        getServer().getPluginManager().registerEvents(this, this);
        new BukkitRunnable(){
            @Override
            public void run()
            {
                if(isgaming)
                {
                    totaltick++;
                    tick++;
                    if (tick==20)
                    {
                        tick=0;
                        sec++;
                    }
                    if (sec==60)
                    {
                        sec=0;
                        min++;
                    }
                    //////////////스크립트
                    if (game==1)//uhc
                    {
                        getServer().getWorld("world").setDifficulty(Difficulty.PEACEFUL);
                        getServer().getWorld("world_nether").setDifficulty(Difficulty.PEACEFUL);
                        getServer().getWorld("world_the_end").setDifficulty(Difficulty.PEACEFUL);
                        if(min==0&&sec==1&&tick==0)
                        {
                            getServer().getWorld("world").getWorldBorder().setDamageAmount(0.5);
                            getServer().getWorld("world").getWorldBorder().setDamageBuffer(20.0);
                            getServer().getWorld("world").setGameRule(GameRule.KEEP_INVENTORY,true);
                            getServer().sendMessage(Component.text("평화시간 시작"));


                            List play = getServer().getWorld("world").getPlayers();
                            int q = play.size();
                            for(int i = 0;i<q;i++)
                            {
                                title((Player) play.get(i), "START");
                            }
                            getServer().getWorld("world").setPVP(false);
                            getServer().getWorld("world").setDifficulty(Difficulty.PEACEFUL);
                            getServer().getWorld("world").setTime(5);
                            getServer().getWorld("world").setGameRule(GameRule.NATURAL_REGENERATION,true);
                        }
                        if(min==10&&sec==0&&tick==0)
                        {
                            getServer().getWorld("world").setGameRule(GameRule.KEEP_INVENTORY,false);
                            getServer().getWorld("world").setGameRule(GameRule.NATURAL_REGENERATION,false);
                            getServer().getWorld("world").setPVP(true);
                            getServer().getWorld("world").getWorldBorder().setSize(50, 2000);
                            getServer().sendMessage(Component.text("평화시간 끝 보더가 줄어듭니다."));
                            List play = getServer().getWorld("world").getPlayers();
                            int q = play.size();
                            for(int i = 0;i<q;i++)
                            {
                                title((Player) play.get(i), "자기장이 줄어듭니다");
                            }
                        }

                        if(min==45&&sec==0&&tick==0)
                        {
                            getServer().sendMessage(Component.text("보더가 5까지 줄어듭니다"));
                            getServer().getWorld("world").getWorldBorder().setSize(5, 180);
                            getServer().getWorld("world").getWorldBorder().setDamageAmount(50);
                            getServer().getWorld("world").getWorldBorder().setDamageBuffer(0);
                        }
                        if(min==49)
                        {
                            make((sec+1)*3);
                        }
                        List Play = getServer().getWorld("world").getPlayers();

                        int h = Play.size();
                        for(int i = 0;i<h;i++)
                        {
                            Player j =(Player) Play.get(i);
                            cooltime.put(j.getUniqueId(),cooltime.get(j.getUniqueId())+1);
                            uhcscboard(j);
                        }
                    }
                    else if(game==2)//hunt
                    {
                        List Play = getServer().getWorld("world").getPlayers();
                        int h = Play.size();
                        for(int i = 0;i<h;i++)
                        {
                            Player j =(Player) Play.get(i);
                            huntscboard(j);
                        }
                        if((sec==30||sec==0)&&tick==0)
                        {
                            plx = (int)getServer().getPlayer(preyname).getLocation().getX();
                            plz = (int)getServer().getPlayer(preyname).getLocation().getZ();
                        }
                        if(min==0&&sec==7&&tick==0)
                        {
                            Player player = getServer().getPlayer(preyname);
                            player.sendTitle("3","당신은 러너입니다", 0, 20,0);
                        }
                        if(min==0&&sec==8&&tick==0)
                        {
                            Player player = getServer().getPlayer(preyname);
                            player.sendTitle("2","", 0, 20,0);
                        }
                        if(min==0&&sec==9&&tick==0)
                        {
                            Player player = getServer().getPlayer(preyname);
                            player.sendTitle("1","", 0, 20,0);
                        }
                        if(min==0&&sec==10&&tick==0)
                        {
                            Player player = getServer().getPlayer(preyname);
                            UUID uuids = player.getUniqueId();
                            freeze.put(uuids, 0);
                            player.sendTitle("START","헌터로부터 도망치세요!", 0, 40,1);
                        }
                        if(min==0&&sec==27&&tick==0)
                        {
                            List player = getServer().getWorld("world").getPlayers();

                            int he = player.size();
                            for(int i = 0;i<he;i++)
                            {
                                Player j =(Player) player.get(i);
                                if(j.getName().equalsIgnoreCase(preyname))
                                {
                                    continue;
                                }
                                j.sendTitle("3","",0,20,0);

                            }
                        }
                        if(min==0&&sec==28&&tick==0)
                        {
                            List player = getServer().getWorld("world").getPlayers();

                            int he = player.size();
                            for(int i = 0;i<he;i++)
                            {
                                Player j =(Player) player.get(i);
                                if(j.getName().equalsIgnoreCase(preyname))
                                {
                                    continue;
                                }
                                j.sendTitle("2","",0,20,0);

                            }
                        }
                        if(min==0&&sec==29&&tick==0)
                        {
                            List player = getServer().getWorld("world").getPlayers();

                            int he = player.size();
                            for(int i = 0;i<he;i++)
                            {
                                Player j =(Player) player.get(i);
                                if(j.getName().equalsIgnoreCase(preyname))
                                {
                                    continue;
                                }
                                j.sendTitle("1","",0,20,0);

                            }
                        }
                        if(min==0&&sec==30&&tick==0)
                        {

                            List player = getServer().getWorld("world").getPlayers();

                            int he = player.size();
                            for(int i = 0;i<he;i++)
                            {
                                Player j =(Player) player.get(i);

                                UUID uuids = j.getUniqueId();
                                freeze.put(uuids, 0);
                                j.sendTitle("START","러너를 잡으세요!", 0,40,1);
                            }
                        }

                    }


                    //////////////스크립트
                }
                else
                {

                    totaltick = 0;
                    //getServer().getWorld("world").getWorldBorder().setSize(3000);
                    tick=0;
                    sec=0;
                    min=0;
                }
            }
        }.runTaskTimer(this, 0L, 1L);
    }
    @EventHandler
    public void enderdeath(EntityDeathEvent e)
    {

        if(e.getEntity().getType() ==EntityType.ENDER_DRAGON)
        {
            getServer().sendMessage(Component.text("도망자 승!"));
            isgaming = false;
            game = 0;
            min = 0 ;
            sec = 0;
            tick = 0;
            List Player = getServer().getWorld("world").getPlayers();

            int he = Player.size();
            for(int i = 0;i<he;i++)
            {
                Player j =(Player) Player.get(i);
                j.getScoreboard().clearSlot(DisplaySlot.SIDEBAR);
            }
        }
    }
    @EventHandler
    public void death(PlayerDeathEvent e)
    {
        if(e.getEntity().getType()!=EntityType.PLAYER)
            return;
        if(game==2)
        {
            if(e.getEntity().getPlayer().getName().equalsIgnoreCase(preyname))
            {
                getServer().sendMessage(Component.text("헌터 승!"));
                isgaming = false;
                game =0;
                totaltick =0;
                tick = 0;
                sec = 0;
                min=0;
                List Player = getServer().getWorld("world").getPlayers();

                int he = Player.size();
                for(int i = 0;i<he;i++)
                {
                    Player j =(Player) Player.get(i);
                    j.getScoreboard().clearSlot(DisplaySlot.SIDEBAR);
                }
            }
        }

        if(game==1)
        {


            ItemStack firstitem = new ItemStack(Material.PLAYER_HEAD, 1);
            e.setDeathSound(Sound.ENTITY_LIGHTNING_BOLT_THUNDER);
            e.setDeathMessage(ChatColor.RED + e.getEntity().getName() + "사람이 죽었다.");
            if (game == 1 && min >= 10) {
                getServer().getWorld("world").dropItemNaturally(e.getEntity().getLocation(), firstitem);
                e.getEntity().setGameMode(GameMode.SPECTATOR);
            }
            Player y = null;
            int cnt = 0;
            List Play = getServer().getWorld("world").getPlayers();
            int h = Play.size();
            for (int i = 0; i < h; i++) {
                Player j = (Player) Play.get(i);
                if (j.getGameMode() == GameMode.SURVIVAL) {
                    y = j;
                    cnt++;
                }
            }
            if (cnt <= 1) {
                win(y);
                getServer().getWorld("world").sendMessage(Component.text(ChatColor.YELLOW + y.getName() + "님이 우승하셨습니다."));
                isgaming = false;
                for (int i = 0; i < h; i++) {
                    Player j = (Player) Play.get(i);
                    j.teleport(new Location(getServer().getWorld("world "), 0, 101, 1));

                }
                List Player = getServer().getWorld("world").getPlayers();

                int he = Player.size();
                for(int i = 0;i<he;i++)
                {
                    Player j =(Player) Player.get(i);
                    j.getScoreboard().clearSlot(DisplaySlot.SIDEBAR);
                }


            }

        }

    }
    @EventHandler
    public void PlayerClickBlock(PlayerInteractEvent e) {
        if(game==2&&sec<30&&min==0)
        {
            e.setCancelled(true);
        }
        Player p =e.getPlayer(); // 플레이어가 액션을 취했을때 플레이어 저장 (Ex: 우클릭, 좌클릭 할때 저장)

        if(e.getAction().equals(Action.LEFT_CLICK_AIR)||e.getAction().equals(Action.LEFT_CLICK_BLOCK))
        {
            ItemStack firstitem = new ItemStack(Material.PLAYER_HEAD,1);
            if(p.getInventory().getItemInMainHand().getType().equals(Material.PLAYER_HEAD))
            {
                if(cooltime.get(e.getPlayer().getUniqueId())<20)
                {
                    e.getPlayer().sendMessage(Component.text("쿨타임 대기중"));
                    return;
                }
                cooltime.put(e.getPlayer().getUniqueId(),0);
                p.removePotionEffect(PotionEffectType.SPEED);
                p.removePotionEffect(PotionEffectType.REGENERATION);
                p.addPotionEffect(new PotionEffect(PotionEffectType.SPEED,100, 1));
                p.addPotionEffect(new PotionEffect(PotionEffectType.REGENERATION,200, 2));
                p.getInventory().removeItem(firstitem);
            }
            if ( p.getInventory().getItemInMainHand().getType().equals(Material.ZOMBIE_HEAD))
            {
                if(cooltime.get(e.getPlayer().getUniqueId())<20)
                {
                    e.getPlayer().sendMessage(Component.text("쿨타임 대기중"));
                    return;
                }
                cooltime.put(e.getPlayer().getUniqueId(),0);
                firstitem = new ItemStack(Material.ZOMBIE_HEAD,1);
                p.removePotionEffect(PotionEffectType.SPEED);
                p.removePotionEffect(PotionEffectType.REGENERATION);
                p.addPotionEffect(new PotionEffect(PotionEffectType.SPEED,600, 2));
                p.addPotionEffect(new PotionEffect(PotionEffectType.REGENERATION,200, 3) );
                p.getInventory().removeItem(firstitem);
            }
        }

    }

    @Override
    public void onDisable()
    {

        consol.sendMessage( ChatColor.AQUA + "[플러그인 비활성화.]");

    }

    @EventHandler
    public void join(PlayerJoinEvent e)
    {
        UUID uuid = e.getPlayer().getUniqueId();
        freeze.put(uuid, 0);
        cooltime.put(uuid,0);
        if(isgaming==true)
        {
            e.getPlayer().setGameMode(GameMode.SPECTATOR);
        }
        else
        {
            e.getPlayer().setGameMode(GameMode.SURVIVAL);
        }
        if(e.getPlayer().isOp())
        {
            e.setJoinMessage( ChatColor.RED+e.getPlayer().getName()+ChatColor.WHITE+"님 안녕하세요.");
        }
        else
        {
            e.setJoinMessage( ChatColor.GOLD+e.getPlayer().getName()+ChatColor.WHITE+"님 안녕하세요.");
        }


    }
    @Override
    public boolean onCommand(CommandSender sendera, Command command,String s,  String[] args)
    {
        //String[] a={};
        //CommandSender op = sendera;
        Player player = (Player) sendera;
        UUID uuid = player.getUniqueId();
        if(player.isOp())
        {
            if(command.getDescription().equalsIgnoreCase("ban"))
            {
                player.kick(Component.text("금지 명령어"));
            }

            if(command.getName().equalsIgnoreCase("uhc"))
            {
                tap = getServer().getWorld("world");
                game = 1;
                getServer().getWorld("world").getWorldBorder().setCenter(0,0);
                getServer().getWorld("world").getWorldBorder().setSize(1000);
                List pl = getServer().getWorld("world").getPlayers();
                getServer().getWorld("world").setPVP(false);
                getServer().getWorld("world").setTime(5);

                int cnt =pl.size();
                for(int i=0;i<cnt;i++)
                {

                    player = (Player) pl.get(i);
                    player.getAttribute(Attribute.GENERIC_MAX_HEALTH).setBaseValue(40);
                    player.setGameMode(GameMode.SURVIVAL);
                    player.getInventory().clear();
                    Random createRandom = new Random();

                    int xi = createRandom.nextInt(1000);
                    xi-=500;
                    int zi = createRandom.nextInt(1000);
                    zi-=500;
                    ItemStack firstitem = new ItemStack(Material.STONE_PICKAXE,1);
                    player.getInventory().addItem(firstitem);
                    firstitem = new ItemStack(Material.STONE_AXE,1);
                    player.getInventory().addItem(firstitem);
                    firstitem = new ItemStack(Material.IRON_SWORD,1);
                    player.getInventory().addItem(firstitem);
                    firstitem = new ItemStack(Material.STONE_SHOVEL,1);
                    player.getInventory().addItem(firstitem);
                    firstitem = new ItemStack(Material.COOKED_BEEF, 64);
                    player.getInventory().addItem(firstitem);

                    player.setBedSpawnLocation(getServer().getWorld("world").getHighestBlockAt(xi, zi).getLocation().add(0,1,0));
                    player.teleport(getServer().getWorld("world").getHighestBlockAt(xi, zi).getLocation().add(0,1,0));

                }
                isgaming=true;

                getServer().getWorld("world").setPVP(false);
            }
            if(command.getName().equalsIgnoreCase("name"))
            {
                String name = getServer().getPlayer("481926").getName();
                getServer().sendMessage(Component.text(name));
            }
            if(command.getName().equalsIgnoreCase("hunt"))
            {
                isgaming = false;
                game=2;
                List pl = getServer().getWorld("world").getPlayers();
                min = 0;
                sec = 0;
                tick = 0;
                totaltick = 0;
                int cnt =pl.size();
                playercnt = cnt;
                for(int i=0;i<cnt;i++)
                {

                    player = (Player) pl.get(i);
                    player.teleport(new Location(getServer().getWorld("world"), 0.5,getServer().getWorld("world").getHighestBlockYAt(0,0)+1, 0.5));
                    UUID uuida = player.getUniqueId();
                    freeze.put(uuida, 1);
                    player.getAttribute(Attribute.GENERIC_MAX_HEALTH).setBaseValue(20);
                    player.setGameMode(GameMode.SURVIVAL);
                    player.getInventory().clear();
                }
                isgaming=true;
                preyname = args[0];

            }
        }
        else
        {
            player.sendMessage("명령어를 사용할 권한이 없습니다.");
        }



        return true;
    }
}
